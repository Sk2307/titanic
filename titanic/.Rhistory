setwd("~/Machine Learning A-Z Template Folder/Datasets/Titanic")
train <- read.csv('train.csv')
test <- read.csv('test.csv')
test$Survived <- NA
full <- rbind(train , test)
train$Set <- 'train'
test$Set <- 'test'
full <- rbind(train , test)
head(train)
dim(train)
summary(train)
str(train)
full <- full[ , 2:13]
View(full)
full$Survived <- as.factor(full$Survived)
str(full)
table(sum(is.na(full[i])))
for (i in 1:12) {
table(sum(is.na(full[i])))
}
for (i in 1:12) {
t <- table(sum(is.na(full[i])))
}
t
library(tidyverse)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na <- count_na / nrow(df)))
}
summary_na(train)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = count_na / nrow(df)))
}
summary_na(train)
summary_na(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df)) * 100)
}
summary_na(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df)) * 100)
}
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df) * 100))
}
summary_na(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df) * 100))
}
summary_na(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df))
}
summary_na(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df)) * 100))
}
summary_na(full)
train <- read.csv('train.csv' , header = T , na.strings = c(""," ","NA"))
test <- read.csv('test.csv' , header = T , na.strings = c(""," ","NA"))
test$Survived <- NA
train$Set <- 'train'
test$Set <- 'test'
full <- rbind(train , test)
full <- full[ , 2:13]
full$Survived <- as.factor(full$Survived)
str(full)
summary_na <- function(df) {
count_na <- sapply(df , function(col) {
sum(is.na(col))
})
return(data.frame(count_na , percent_na = (count_na / nrow(df)) * 100))
}
summary_na(full)
full$Embarked[which(is.na(full$Embarked))] <- full$Embarked[which.max(full$Embarked)]
summary_na(full)
full$Fare[which(is.na(full$Fare))] <- mean(full$Fare , na.rm = T)
summary_na(full)
full$Title <- (gsub('(.*,) | (\\..*'),'',full$Name)
full$Title <- (gsub('(.*,) | (\\..*)','',full$Name)
)
table(full$Sex , full$Title)
full$Title <- (gsub('(.*, )|(\\..*)', '', full$Name))
table(full$Sex , full$Title)
table(full$Title)
title_mr <- c('Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir')
title_miss <- c('Mlle','Ms')
title_mrs <- c('Dona','Lady','Mme','the Countess')
full$Title[which(full$Title %in% title_mr)] = 'Mr'
full$Title[which(full$Title %in% title_miss)] = 'Miss'
full$Title[which(full$Title %in% title_mrs)] = 'Mrs'
summary(full$Title)
str(full$Title)
str(full)
full$Title = droplevels(full$Title)
full$Title <- as.factor(full$Title)
str(full)
mean_title <- if(full$Title == 'Master'){
mean(full$Title)
}
library(rpart)
View(train)
age_tree <- rpart(Age ~ . , data = train)
rpart.plot::rpart.plot(age_tree)
age_tree <- rpart(Age ~ Pclass+SibSp+Parch+Fare+Embarked , data = train)
rpart.plot::rpart.plot(age_tree)
train$Title <- (gsub('(.*, )|(\\..*)', '', full$Name))
train$Title[which(train$Title %in% title_mr)] = 'Mr'
train$Title[which(train$Title %in% title_miss)] = 'Miss'
train$Title[which(train$Title %in% title_mrs)] = 'Mrs'
train$Title <- (gsub('(.*, )|(\\..*)', '', train$Name))
train$Title[which(train$Title %in% title_mr)] = 'Mr'
train$Title[which(train$Title %in% title_miss)] = 'Miss'
train$Title[which(train$Title %in% title_mrs)] = 'Mrs'
train$Title <- as.factor(train$Title)
str(train)
age_tree <- rpart(Age ~ Pclass+SibSp+Parch+Fare+Embarked , data = train)
rpart.plot::rpart.plot(age_tree)
age_tree <- rpart(Age ~ Pclass+SibSp+Parch+Fare+Embarked+Title , data = train)
rpart.plot::rpart.plot(age_tree)
summary_na(train)
age_tree <- rpart(Age ~ Pclass+SibSp+Parch+Fare+Embarked+Title , data = full)
rpart.plot::rpart.plot(age_tree)
full$Pclass <- as.factor(full$Pclass)
str(train)
str(full)
age_tree <- rpart(Age ~ Pclass+SibSp+Parch+Fare+Embarked+Title , data = full)
rpart.plot::rpart.plot(age_tree)
full$pred_age <- predict(age_tree,full)
ggplot(data = full , aes(x = Age , y = pred_age)) +
geom_point() +
geom_smooth()
ggplot(data = full , aes(x = Age , y = pred_age)) +
geom_bar() +
geom_smooth()
ggplot(data = full , aes(x = Age , y = pred_age)) +
geom_line() +
geom_smooth()
ggplot(data = full , aes(x = Age , y = pred_age)) +
geom_point() +
geom_smooth()
full$Age[is.na(Age),Age <- pred_age]
full$Age[is.na(full$Age),Age <- pred_age]
full$Age[is.na(full$Age),full$Age <- full$pred_age]
full$Age[is.na(full$Age),full$Age = full$pred_age]
full$Age[is.na(full$Age),full$Age := full$pred_age]
full[is.na(Age),Age := predAge,]
full[is.na(Age),Age = predAge,]
full[is.na(Age),Age <- predAge,]
age_lm <- lm(Age~.,data = full)
full$Age[which(is.na(full$Age))] = full$pred_age
summary_na(full)
View(full)
View(full)
full <- full[,-14]
full <- full[,-10]
summary_na(full)
source('~/Machine Learning A-Z Template Folder/Datasets/Titanic/titanic/titanic.R', echo=TRUE)
str(full)
ggplot(data = full[1:891, ] , aes(x = Pclass ,fill=factor(Survived))) +
geom_bar()+
labs(x = Pclass , y = Count)+
ggtitle('Survival Rate : Rich vs Poor')
ggplot(data = full[1:891, ] , aes(x = Pclass ,fill=factor(Survived))) +
geom_bar()+
labs(x = 'Pclass' , y = 'Count')+
ggtitle('Survival Rate : Rich vs Poor')
ggplot(data = full[1:891, ] , aes(x = Pclass ,fill=factor(Survived))) +
geom_bar()+
labs(x = 'Pclass' , y = 'Count' , fill = 'Survival')+
ggtitle('Survival Rate : Rich vs Poor')
ggplot(data = full[1:891, ] , aes(x = Pclass ,fill= Survived)) +
geom_bar()+
labs(x = 'Pclass' , y = 'Count' , fill = 'Survival')+
ggtitle('Survival Rate : Rich vs Poor')
ggplot(data = full[1:891,] , aes(x = Sex , fill = Survived)) +
geom_bar()+
facet_wrap(~Pclass) +
labs(x = 'Sex' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Male vs Female')
ggplot(data = full[1:891] , aes(x = Title , y = Survived)) +
geom_bar() +
labs(x = 'Title' , y = 'Count' , fill = 'Survived')+
ggtitle('Survival Rate : Titles')
ggplot(data = full[1:891,] , aes(x = Title , y = Survived)) +
geom_bar() +
labs(x = 'Title' , y = 'Count' , fill = 'Survived')+
ggtitle('Survival Rate : Titles')
ggplot(data = full[1:891,] , aes(x = Title , fill = Survived)) +
geom_bar() +
labs(x = 'Title' , y = 'Count' , fill = 'Survived')+
ggtitle('Survival Rate : Titles')
full$Family_Size <- full$SibSp + full$Parch + 1
full$Family_Size[full$Family_Size == 1] <- 'Single'
full$Family_Size[full$Family_Size > 1 & full$Family_Size < 5] <- 'Small'
full$Family_Size[full$Family_Size > 4] <- 'Large'
full$Family_Size <- as.factor(full$Family_Size)
str(full)
ggplot(data = full[1:891,] , aes(x = Family_Size , fill = Survived)) +
geom_bar() +
labs(x = 'Family Size' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Family Size')
ggplot(data = full[1:891,] , aes(x = Family_Size , fill = factor(Survived))) +
geom_bar() +
labs(x = 'Family Size' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Family Size')
full$Family_Size_int <- full$SibSp + full$Parch + 1
full$Family_Size[full$Family_Size_int == 1] <- 'Single'
full$Family_Size[full$Family_Size_int > 1 & full$Family_Size_int < 5] <- 'Small'
full$Family_Size[full$Family_Size_int > 4] <- 'Large'
full$Family_Size <- as.factor(full$Family_Size)
full$Family_Size_int <- full$SibSp + full$Parch + 1
full$Family_Size_Int <- full$SibSp + full$Parch + 1
full$Family_Size[full$Family_Size_Int == 1] <- 'Single'
full <- full[ , -c(12:14)]
full$Family_Size_Int <- full$SibSp + full$Parch + 1
full$Family_Size[full$Family_Size_Int == 1] <- 'Single'
full$Family_Size[full$Family_Size_int > 1 & full$Family_Size_int < 5] <- 'Small'
full$Family_Size[full$Family_Size_int > 4] <- 'Large'
full$Family_Size <- as.factor(full$Family_Size)
ggplot(data = full[1:891,] , aes(x = Family_Size , fill = Survived)) +
geom_bar() +
labs(x = 'Family Size' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Family Size')
full$Family_Size[full$Family_Size_int > 1 & full$Family_Size_int < 5] <- 'Small'
full$Family_Size[full$Family_Size_int >= 1 & full$Family_Size_int <= 4] <- 'Small'
full$Family_Size[full$Family_Size_int >= 5] <- 'Large'
full$Family_Size <- as.factor(full$Family_Size)
full <- full[ , -c(12:13)]
full$FamilySize <- full$SibSp + full$Parch + 1
full$Family_Size[full$FamilySize == 1]   <- 'Single'
full$Family_Size[full$FamilySize < 5 & full_titanic$FamilySize >= 2]   <- 'Small'
full$Family_Size[full$FamilySize >= 5]   <- 'Large'
full$Family_Size[full$FamilySize < 5 & full$FamilySize >= 2]   <- 'Small'
full$Family_Size=as.factor(full$Family_Size)
#4. Family Size and Survival Rate
ggplot(data = full[1:891,] , aes(x = Family_Size , fill = Survived)) +
geom_bar() +
labs(x = 'Family Size' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Family Size')
ggplot(data = full[1:891,] , aes(x = Embarked , fill = Survived)) +
geom_bar() +
labs(x = 'Embarked' , y = 'Count' , fill = 'Survived') +
ggtitle('Survival Rate : Embarked')
train <- full[1:891,]
test <- full[892:1309,]
View(train)
train <- train[,-c(7,10,12)]
View(test)
test <- test[,-c(1,7,10,12)]
regressor_mlinear = lm(formula = Survived ~ .,
data = train)
str(train)
library(e1071)
regressor_svm = svm(formula = Survived ~ . , data = train ,
type = 'eps-regression' , kernel = 'radial')
regressor_svm = svm(formula = Survived ~ . , data = train , scale = T
type = 'eps-regression' , kernel = 'radial')
regressor_svm = svm(formula = Survived ~ . , data = train , scale = T,
type = 'eps-regression' , kernel = 'radial')
summary_na(train)
train$Survived <- as.numeric(train$Survived)
str(train)
train <- full[1:891,]
train <- train[,-c(7,10,12)]
for (i in 1:891) {
ifelse(train$Survived[i] == 0 ,0, 1)
}
View(full)
str(train)
for (i in 1:891) {
ifelse(train$Survived[i] == 0 ,'0', '1')
}
str(train)
train$Survived <- as.numeric(train$Survived)
str(train)
View(full)
for (i in 1:891) {
ifelse(train$Survived[i] == 1 , 0 ,  1)
}
train <- full[1:891,]
train <- train[,-c(7,10,12)]
train$Survived <- as.integer(train$Survived)
str(train)
for (i in 1:891) {
ifelse(train$Survived[i] == 1 , 0 ,  1)
}
train <- full[1:891,]
train <- train[,-c(7,10,12)]
train$Survived <- as.numeric(train$Survived)
str(train)
train$Survived <- factor(train$Survived , levels = c(1 , 2)
,labels = c(0,1))
str(train)
train$Survived <- as.numeric(train$Survived)
library(e1071)
regressor_svm = svm(formula = Survived ~ . , data = train , scale = T,
type = 'eps-regression' , kernel = 'radial')
setwd("~/Machine Learning A-Z Template Folder/Datasets/Titanic/titanic")
y_pred_svm <- predict(regressor_svm , newdata = test)
summary(regressor_svm)
set.seed(123)
regressor_svm = svm(formula = Survived ~ . , data = train , scale = T,
type = 'eps-regression' , kernel = 'radial')
y_pred_svm <- predict(regressor_svm , newdata = test)
summary(regressor_svm)
install.packages("caret")
library(caret)
library(caTools)
set.seed(123)
split = sample.split(train$Survived, SplitRatio = 2/3)
training_set = subset(train, split == TRUE)
test_set = subset(train, split == FALSE)
regressor_svm = svm(formula = Survived ~ . , data = training_set , scale = T,
type = 'eps-regression' , kernel = 'radial')
y_pred_svm <- predict(regressor_svm , newdata = test_set)
summary(regressor_svm)
cm <- confusionMatrix(y_pred_svm , test_set$Survived)
confusionMatrix(y_pred_svm , test_set$Survived)
View(test_set)
View(training_set)
summary(y_pred_svm)
library(rpart)
regressor_dt <- rpart(formula = Survived~., data = training_set ,
control = rpart.control(minsplit = 1))
rpart.plot::rpart.plot(regressor_dt , extra = 3 , fallen.leaves = T)
rpart.plot(regressor_dt , extra = 3 , fallen.leaves = T)
install.packages("rpart.plot")
plot(regressor_dt)
regressor_dt <- rpart(formula = Survived~., data = training_set )
plot(regressor_dt)
regressor_dt <- rpart(formula = Survived~., data = training_set ,
control = rpart.control(minsplit = 1))
plot(regressor_dt)
summary(regressor_dt)
library(rpart.plot)
rpart.plot(regressor_dt , extra = 3 , fallen.leaves = T)
regressor_dt <- rpart(formula = Survived~., data = training_set ,
control = rpart.control(minsplit = 1) , method = 'class')
summary(regressor_dt)
rpart.plot(regressor_dt , extra = 3 , fallen.leaves = T)
y_pred_dt <- predict(y_pred_dt , data = test_set , type = 'class')
y_pred_dt <- predict(regressor_dt , data = test_set , type = 'class')
cm_dt <- confusionMatrix(y_pred_dt , test_set$Survived)
library(caret)
cm_dt <- confusionMatrix(y_pred_dt , test_set$Survived)
cm_dt <- confusionMatrix(y_pred_dt , test_set$Survived, na.action = na.pass)
cm_dt <- table(test_set[,1] , y_pred_dt)
y_pred_dt <- predict(regressor_dt , newdata = test_set , type = 'class')
cm_dt <- table(test_set[,1] , y_pred_dt)
cm
y_pred_dt <- predict(regressor_dt , newdata = test_set)
cm_dt <- table(test_set[,1] , y_pred_dt)
y_pred_dt <- predict(regressor_dt , newdata = test_set , type = "class")
cm_dt <- table(test_set[,1] , y_pred_dt)
cm
cm
cm_dt
((165 + 77)-(37+18))/(165+37+18+77)
plot(regressor_dt)
plot(regressor_dt)
library(randomForest)
set.seed(1234)
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500)
y
summary(regressor_rf)
regressor_rf
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500 ,
importance = T)
regressor_rf
varImpPlot(regressor_rf)
training_set1 <- training_set
training_set1 <- training_set1[,-c(4:6,8)]
View(regressor_dt)
View(training_set1)
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500)
regressor_rf
regressor_rf1 <- randomForest(x = training_set1[,-1] ,
y = training_set1[,1] , ntree = 500)
regressor_rf1
y_pred_rf <- predict(regressor_rf , newdata = test_set)
cm_rf <- table(test_set[,1] , y_pred_rf)
cm_rf
print(regressor_rf)
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500 , importance = T)
print(regressor_rf)
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500 ,
importance = T , do.trace = T)
fit$confusion[, 'class.error']
regressor_rf <- randomForest(x = training_set[,-1] ,
y = training_set[,1] , ntree = 500 ,
importance = F , do.trace = T)
print(regressor_rf)
y_pred_rf <- predict(regressor_rf , newdata = test_set)
postResample(y_pred_rf , test_set[,1])
mean(y_pred_rf == test_set$Survived)
regressor_rf1 <- randomForest(x = training_set1[,-1] ,
y = training_set1[,1] , ntree = 500)
regressor_rf1
y_pred_rf1 <- predict(regressor_rf1 , newdata = test_set)
postResample(y_pred_rf1 , test_set[,1])
training_set1 <- training_set
training_set1 <- training_set1[,-c(5,6,8)]
set.seed(1274)
liner.tune=tune.svm(Survived~.,data=training_set1,kernel="linear",cost=c(0.01,0.1,0.2,0.5,0.7,1,2,3,5,10,15,20,50,100))
liner.tune
ibrary(e1071)
library(e1071)
liner.tune=tune.svm(Survived~.,data=training_set1,kernel="linear",cost=c(0.01,0.1,0.2,0.5,0.7,1,2,3,5,10,15,20,50,100))
liner.tune
regressor_svm_l=tune.svm(Survived~.,data=training_set1,kernel="linear",cost=c(0.01,0.1,0.2,0.5,0.7,1,2,3,5,10,15,20,50,100))
regressor_svm_l
y_pred_svml <- predict(regressor_svm_l , newdata = test_set , type = 'class'
)
set.seed(123)
library(e1071)
regressor_svm_l= svm(formula = Survived~. , data = training_set1 ,
type = 'eps-regression' , kernel = 'linear')
regressor_svm_l
y_pred_svml <- predict(regressor_svm_l , newdata = test_set , type = 'class')
y_pred_svml <- predict(regressor_svm_l , newdata = test_set )
cm <- table(test_set[,1] , y_pred_svml)
cm
y_pred_svml <- predict(regressor_svm_l , newdata = test_set , type = 'class'
)
cm <- confusionMatrix(y_pred_svml , test_set$Survived)
y_pred_svml <- predict(regressor_svm_l , newdata = test_set )
cm <- table(test_set[,1] , y_pred_svml)
cm <- confusionMatrix(y_pred_svml , test_set$Survived)
